<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HysialX-一个简易的qq机器人框架</title>
      <link href="/2023/09/02/HysialX-%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/09/02/HysialX-%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="HysialX-框架相关"><a href="#HysialX-框架相关" class="headerlink" title="HysialX 框架相关"></a>HysialX 框架相关</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一个简易的 python qq机器人框架，可自行编写插件实现诸多功能 本框架依赖于 go-cqhttp 运行</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/Xinre-L-awa/HysialX/releases/tag/v1.0.0">点击跳转到下载页面</a><br>下载后解压即可</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>您需要在 go-cqhttp工作目录下的 <code>config.json</code>中配置机器人信息<br>首先需在 <code>server:</code> 后添加以下信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">http:</span> <span class="comment"># HTTP 通信设置</span></span><br><span class="line">      <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:570</span> <span class="comment"># HTTP监听地址</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">5</span>      <span class="comment"># 反向 HTTP 超时时间, 单位秒，&lt;5 时将被忽略</span></span><br><span class="line">      <span class="attr">long-polling:</span>   <span class="comment"># 长轮询拓展</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span>       <span class="comment"># 是否开启</span></span><br><span class="line">        <span class="attr">max-queue-size:</span> <span class="number">2000</span> <span class="comment"># 消息队列大小，0 表示不限制队列大小，谨慎使用</span></span><br><span class="line">      <span class="attr">middlewares:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="string">*default</span> <span class="comment"># 引用默认中间件</span></span><br><span class="line">      <span class="attr">post:</span>           <span class="comment"># 反向HTTP POST地址列表</span></span><br><span class="line">      <span class="comment">#- url: &#x27;&#x27;                # 地址</span></span><br><span class="line">      <span class="comment">#  secret: &#x27;&#x27;             # 密钥</span></span><br><span class="line">      <span class="comment">#  max-retries: 3         # 最大重试，0 时禁用</span></span><br><span class="line">      <span class="comment">#  retries-interval: 1500 # 重试时间，单位毫秒，0 时立即</span></span><br><span class="line">      <span class="comment">#- url: http://127.0.0.1:5701/ # 地址</span></span><br><span class="line">      <span class="comment">#  secret: &#x27;&#x27;                  # 密钥</span></span><br><span class="line">      <span class="comment">#  max-retries: 10             # 最大重试，0 时禁用</span></span><br><span class="line">      <span class="comment">#  retries-interval: 1000      # 重试时间，单位毫秒，0 时立即</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">ws-reverse:</span></span><br><span class="line">      <span class="attr">universal:</span> <span class="string">ws://127.0.0.1:8080/hysialx/event</span></span><br><span class="line">      <span class="attr">reconnect-interval:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">middlewares:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br></pre></td></tr></table></figure><h2 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先声明本框架的 <strong>所有插件均为 python包 的格式，且务必需置于 <code>plugins</code> 目录下</strong><br>在插件编写过程中，所需导入的所有框架内的方法、类等均位于 <code>hysialx.api</code> 和 <code>hysialx.plugins.manager</code> 包下</p><h3 id="开始创作"><a href="#开始创作" class="headerlink" title="开始创作"></a>开始创作</h3><p>在正式开始前，先提供一个示例插件 <code>test</code> 以供参考（更多示例插件请移步 <code>hysialx.plugins</code>）</p><h4 id="示例插件"><a href="#示例插件" class="headerlink" title="示例插件"></a>示例插件</h4><p><code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plugins.manager <span class="keyword">import</span> PluginMeta</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .main <span class="keyword">import</span> echo</span><br><span class="line"></span><br><span class="line">__plugin_meta__ = PluginMeta(</span><br><span class="line">    <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    Usage=<span class="string">&quot;当用户发送 echo 命令时，将返回用户发送的命令&quot;</span>,</span><br><span class="line">    Author=<span class="string">&quot;HysiaX&quot;</span>,</span><br><span class="line">    Description=<span class="string">&quot;HysialX 示例插件&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> (</span><br><span class="line">    Bot,</span><br><span class="line">    Event,</span><br><span class="line">    on_keyword</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@on_keyword(<span class="params"><span class="string">&quot;echo&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params"></span></span><br><span class="line"><span class="params">    bot: Bot,</span></span><br><span class="line"><span class="params">    event: Event</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">await</span> bot.send(event.get_group_id, event.get_message)</span><br></pre></td></tr></table></figure><p>在本示例中，<code>__init__.py</code> 用来初始化插件信息及其内部的对接收到的信息进行处理的函数。其中 <code>__plugin_meta__</code> 变量用于描述插件信息，包括插件名、描述、作者、用法等。如你所见，<code>PluginMeta</code> 是 <code>__plugin_meta__</code> 的元类，它定义在 <code>hysialx.plugins.manager</code> 包下。事实上，<code>__plugin_meta__</code> 的有无并不重要，它只是提供了一个 <code>PluginMeta</code> 实例，你可以通过 <code>get_plugin_pool</code> 直接访问 <code>PluginMeta</code> 的属性。<br><code>main.py</code> 则用来编写插件的逻辑，其中 <code>on_keyword</code> 装饰器用于注册一个命令，当用户发送命令时，会调用 <code>echo</code> 函数。 <em><code>on_keyword</code>及其他响应方式的使用方法请参考下文 <a href="#api%E4%BB%8B%E7%BB%8D">api介绍</a> 一节。</em></p><h3 id="api介绍"><a href="#api介绍" class="headerlink" title="api介绍"></a>api介绍</h3><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><strong>插件函数相关</strong></p><ul><li>custom</li><li>on_regex</li><li>on_command</li><li>on_keyword</li><li>on_startup</li><li>RunInLoop</li></ul><p><strong>机器人配置</strong></p><ul><li>set_device</li></ul><p><strong>其他</strong></p><ul><li>get_func_pool</li><li>get_plugin_pool</li><li>get_waiting_pool</li><li>getExpectedFuncs</li></ul><h4 id="各个api的作用"><a href="#各个api的作用" class="headerlink" title="各个api的作用"></a>各个api的作用</h4><p><strong>custom</strong></p><ul><li>函数签名：<code>custom(response_method: Callable) -&gt; Callable[[Bot, Event], Any]</code></li><li>说明：接收一个 <code>response_method</code> 用于检测用户发送的信息是否符和该函数的响应方式，如果符合，则调用该函数。</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@custom(<span class="params"><span class="keyword">lambda</span> msg: msg.startswith(<span class="params"><span class="string">&#x27; &#x27;</span></span>)</span>)  </span><span class="comment"># 检测用户信息是否为空格开头</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">your_func</span>(<span class="params">bot: Bot, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>on_regex</strong></p><ul><li>函数签名：<code>on_regex(regex: str) -&gt; Callable[[Bot, Event], Any]</code></li><li>说明：接收一个正则表达式，用于检测用户发送的信息是否符合该正则表达式。该装饰器装饰的函数所接收到的 <code>event.get_message</code> 将为正则表达式匹配到的结果。</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@on_regex(<span class="params"><span class="string">&quot;echo(.*)&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params"></span></span><br><span class="line"><span class="params">    bot: Bot,</span></span><br><span class="line"><span class="params">    event: Event</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>on_command</strong></p><ul><li>函数签名：<code>on_command(cmd: Optional[str]=None) -&gt; Callable[[Bot, Event], Any]</code></li><li>说明：接收一个命令，当用户发送该命令时，调用函数</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@on_command(<span class="params">cmd</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params"></span></span><br><span class="line"><span class="params">    bot: Bot,</span></span><br><span class="line"><span class="params">    event: Event</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>on_keyword</strong></p><ul><li>函数签名：<code>on_keyword(keyword: Optional[str]=None) -&gt; Callable[[Bot, Event], Any]</code></li><li>说明：接收一个关键字，当用户消息中包含该关键字时，调用 <code>func</code> 函数</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@on_keyword(<span class="params">keyword</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params"></span></span><br><span class="line"><span class="params">    bot: Bot,</span></span><br><span class="line"><span class="params">    event: Event</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>on_startup</strong></p><ul><li>函数签名：<code>on_startup(func: Callable[[Bot], Any]) -&gt; Callable[[Bot], Any]</code></li><li>说明：在机器人启动时调用函数</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@on_startup</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup</span>(<span class="params">bot: Bot, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>on_shutdown</strong> <em>未实现</em></p><ul><li>函数签名：<code>on_shutdown(func: Callable[[Bot], Any]) -&gt; Callable[[Bot], Any]</code></li><li>说明：在机器人关闭时调用函数</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@on_shutdown</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">shutdown</span>(<span class="params">bot: Bot, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>RunInLoop</strong></p><ul><li>函数签名：<code>RunInLoop(func: Callable[[Bot], Any]) -&gt; Callable[[Bot], Any]</code></li><li>说明：在消息循环中调用函数（更准确来说是每收到一次消息就调用一次函数）</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunInLoop</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>(<span class="params">bot: Bot, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>set_device</strong></p><ul><li>函数签名：<code>set_device(device: str) -&gt; None</code></li><li>说明：设置机器人设备名称（可能失败，具体信息请参考 <a href="https://docs.go-cqhttp.org/api/#%E8%AE%BE%E7%BD%AE%E5%9C%A8%E7%BA%BF%E6%9C%BA%E5%9E%8B">go-cqhttp set_device文档</a>）</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_device(<span class="string">&quot;114514 大粪手机&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>get_func_pool</strong></p><ul><li>函数签名：<code>get_func_pool() -&gt; pool.FuncPool</code></li><li>说明：获取当前已注册的函数池</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_func_pool()</span><br></pre></td></tr></table></figure></li></ul><p><strong>get_plugin_pool</strong></p><ul><li>函数签名：<code>get_plugin_pool() -&gt; plugins.managet.PluginPool</code></li><li>说明：获取当前已注册的插件池，用法同上</li></ul><p><strong>get_waiting_pool</strong> <em>尚无实际意义</em></p><ul><li>函数签名：<code>get_waiting_pool() -&gt; pool.WaitingPool</code></li><li>说明：获取当前已注册的等待函数池，用法同上</li></ul><p><strong>getExpectedFunc</strong></p><ul><li>函数签名：<code>getExpectedFunc(func_pool: &quot;pool.FuncPool&quot;, expected_type: str) -&gt; pool.FuncPool</code></li><li>说明：获取指定类型的函数池</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getExpectedFunc(get_func_pool(), <span class="string">&quot;on_regex&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p><em>未完待续~</em></p>]]></content>
      
      
      <categories>
          
          <category> HysialX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HysialX </tag>
            
            <tag> qq机器人框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次使用 Hexo</title>
      <link href="/2023/09/02/hello-world/"/>
      <url>/2023/09/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>由于我不会前端，所以就使用 Hexo 搭建博客，用以记录自己的一些学习笔记及成果。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
